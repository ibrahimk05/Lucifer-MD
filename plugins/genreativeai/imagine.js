const { exec } = require('child_process');

// List of models
const models = [
    'dreamshaperXL10_alpha2.safetensors [c8afe2ef]',
    'dynavisionXL_0411.safetensors [c39cc051]',
    'juggernautXL_v45.safetensors [e75f5471]',
    'realismEngineSDXL_v10.safetensors [af771c3f]',
    'sd_xl_base_1.0.safetensors [be9edd61]',
    'sd_xl_base_1.0_inpainting_0.1.safetensors [5679a81a]',
    'turbovisionXL_v431.safetensors [78890989]'
];

// Your negative prompt string
const negativePrompt = 'canvas frame, cartoon, 3d, ((disfigured)), ((bad art)), ((deformed)),((extra limbs)),((close up)),((b&w)), weird colors, blurry, (((duplicate))), ((morbid)), ((mutilated)), [out of frame], extra fingers, mutated hands, ((poorly drawn hands)), ((poorly drawn face)), (((mutation))), (((deformed))), ((ugly)), blurry, ((bad anatomy)), (((bad proportions))), ((extra limbs)), cloned face, (((disfigured))), out of frame, ugly, extra limbs, (bad anatomy), gross proportions, (malformed limbs), ((missing arms)), ((missing legs)), (((extra arms))), (((extra legs))), mutated hands, (fused fingers), (too many fingers), (((long neck))), Photoshop, video game, ugly, tiling, poorly drawn hands, poorly drawn feet, poorly drawn face, out of frame, mutation, mutated, extra limbs, extra legs, extra arms, disfigured, deformed, cross-eye, body out of frame, blurry, bad art, bad anatomy, 3d render';

exports.run = {
    usage: ['imagine'],
    category: 'generativeai',
    async: async (m, { client, text, command, Func }) => {
        try {
            // Step 1: If no text is provided, prompt for text
            if (!text) {
                return client.reply(m.chat, `Please provide a prompt. Example: /${command} "your prompt here"`, m);
            }

            // Step 2: Generate images for **all** models
            client.sendReact(m.chat, 'ðŸ•’', m.key);
            console.log('Generating images for all models:', models);

            const jobIds = []; // Store job IDs for each model

            models.forEach((model) => {
                const curlCommand = `curl --request POST \
                    --url https://api.prodia.com/v1/sdxl/generate \
                    --header 'X-Prodia-Key: 501eba46-a956-4649-96aa-2d9cc0f048bf' \
                    --header 'accept: application/json' \
                    --header 'content-type: application/json' \
                    --data '{
                        "model": "${model}",
                        "prompt": "${text} generated using ${model}",
                        "negative_prompt": "${negativePrompt}",
                        "steps": 25,
                        "style_preset": "cinematic",
                        "cfg_scale": 7,
                        "seed": -1,
                        "sampler": "DPM++ 2M Karras",
                        "width": 512,
                        "height": 512
                    }'`;

                try {
                    // Execute cURL command to generate the image and get job ID
                    console.log(`Sending generation request for model: ${model}`);
                    exec(curlCommand, (error, stdout, stderr) => {
                        if (error) {
                            console.error(`Error generating image for model: ${model}`, error);
                        } else {
                            const response = JSON.parse(stdout);
                            const jobId = response.job;
                            console.log(`Generation started for model: ${model}, Job ID: ${jobId}`);
                            jobIds.push(jobId); // Store job ID
                        }
                    });
                } catch (e) {
                    console.error(`Error generating image for model: ${model}`, e);
                }
            });

            // Step 3: Wait for 20 seconds (assuming images will be ready)
            setTimeout(async () => {
                // Generate image URLs after 20 seconds
                const imageUrls = jobIds.map(jobId => `https://images.prodia.xyz/${jobId}.png`);
                
                // Fetch buffers for each image URL
                const buffers = await Promise.all(imageUrls.map(url => Func.fetchBuffer(url)));

                // Create cards for each image
                const cards = buffers.map((buffer, index) => ({
                    header: {
                        imageMessage: buffer,
                        hasMediaAttachment: true,
                    },
                    body: {
                        text: `Generated by model: ${models[index]}`
                    },
                    nativeFlowMessage: {}
                }));

                // Send carousel of generated images
                console.log('Sending carousel of generated images');
                client.sendCarousel(m.chat, cards, m, {
                    content: 'Here are the images generated from all models:'
                });
                
            }, 20000); // Wait for 20 seconds before fetching the images
        } catch (e) {
            console.error('Error:', e);
            client.reply(m.chat, 'An error occurred while generating the image', m);
        }
    },
    error: false,
    limit: true,
    premium: true,
    verified: true,
    location: __filename
};
